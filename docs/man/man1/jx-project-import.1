.TH "JX-PROJECT\-IMPORT" "1" "" "Auto generated by spf13/cobra" "" 
.nh
.ad l


.SH NAME
.PP
jx\-project\-import \- Imports a local project or Git repository into Jenkins


.SH SYNOPSIS
.PP
\fBjx\-project import\fP


.SH DESCRIPTION
.PP
Imports a local folder or Git repository into Jenkins X.

.PP
If you specify no other options or arguments then the current directory is imported. Or you can use '\-\-dir' to specify a directory to import.

.PP
You can specify the git URL as an argument.

.PP
For more documentation see: 
\[la]https://jenkins-x.io/docs/using-jx/creating/import/\[ra]


.SH OPTIONS
.PP
\fB\-\-all\fP[=false]
    If selecting projects to import from a Git provider this defaults to selecting them all

.PP
\fB\-b\fP, \fB\-\-batch\-mode\fP[=false]
    Runs in batch mode without prompting for user input

.PP
\fB\-\-boot\-secret\-name\fP="jx\-boot"
    The name of the boot secret

.PP
\fB\-\-canary\fP[=false]
    should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster

.PP
\fB\-\-deploy\-kind\fP=""
    The kind of deployment to use for the project. Should be one of knative, default

.PP
\fB\-\-dir\fP="."
    Specify the directory to import

.PP
\fB\-\-docker\-registry\-org\fP=""
    The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used

.PP
\fB\-\-dry\-run\fP[=false]
    Performs local changes to the repo but skips the import into Jenkins X

.PP
\fB\-\-env\-name\fP=""
    The name of the environment to create (only used for env projects)

.PP
\fB\-\-env\-strategy\fP="Never"
    The promotion strategy of the environment to create (only used for env projects)

.PP
\fB\-\-git\-kind\fP=""
    the kind of git server to connect to

.PP
\fB\-\-git\-provider\-url\fP=""
    Deprecated: please use \-\-git\-server

.PP
\fB\-\-git\-server\fP=""
    the git server URL to create the scm client

.PP
\fB\-\-git\-token\fP=""
    the git token used to operate on the git repository. If not specified it's loaded from the git credentials file

.PP
\fB\-\-git\-username\fP=""
    the git username used to operate on the git repository. If not specified it's loaded from the git credentials file

.PP
\fB\-\-github\fP[=false]
    If you wish to pick the repositories from GitHub to import

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for import

.PP
\fB\-\-hpa\fP[=false]
    should we enable the Horizontal Pod Autoscaler for this application.

.PP
\fB\-\-import\-commit\-message\fP=""
    Specifies the initial commit message used when importing the project

.PP
\fB\-\-jenkins\fP=""
    The name of the Jenkins server to import the project into

.PP
\fB\-\-jenkinsfilerunner\fP=""
    if you want to import into Jenkins X with Jenkinsfilerunner this argument lets you specify the container image to use

.PP
\fB\-\-jx\fP[=false]
    if you want to default to importing this project into Jenkins X instead of a Jenkins server if you have a mixed Jenkins X and Jenkins cluster

.PP
\fB\-\-log\-level\fP=""
    Sets the logging level. If not specified defaults to $JX\_LOG\_LEVEL

.PP
\fB\-n\fP, \fB\-\-name\fP=""
    Specify the Git repository name to import the project into (if it is not already in one)

.PP
\fB\-\-nested\-repo\fP[=false]
    Specify if using nested repositories (in gitlab)

.PP
\fB\-\-no\-collaborator\fP[=false]
    disables checking if the bot user is a collaborator. Only used if you have an issue with your git provider and this functionality in go\-scm

.PP
\fB\-\-no\-dev\-pr\fP[=false]
    disables generating a Pull Request on the cluster git repository

.PP
\fB\-\-no\-pack\fP[=false]
    Disable trying to default a Dockerfile and Helm Chart from the pipeline catalog pack

.PP
\fB\-\-no\-start\fP[=false]
    disables starting a release pipeline when importing/creating a new project

.PP
\fB\-\-operator\-namespace\fP="jx\-git\-operator"
    The namespace where the git operator is installed

.PP
\fB\-\-org\fP=""
    Specify the Git provider organisation to import the project into (if it is not already in one)

.PP
\fB\-\-pack\fP=""
    The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages

.PP
\fB\-\-pipeline\-catalog\-dir\fP=""
    The pipeline catalog directory you want to use instead of the buildPackGitURL in the dev Environment Team settings. Generally only used for testing pipelines

.PP
\fB\-\-pr\-poll\-period\fP=20s
    the time between polls of the Pull Request on the cluster environment git repository

.PP
\fB\-\-pr\-poll\-timeout\fP=20m0s
    the maximum amount of time we wait for the Pull Request on the cluster environment git repository

.PP
\fB\-\-scheduler\fP="in\-repo"
    Change schedulerName, More info in 
\[la]https://jenkins-x.io/v3/develop/faq/config/repos/#how-do-i-customise-a-scheduler\[ra]

.PP
\fB\-\-service\-account\fP="tekton\-bot"
    The Kubernetes ServiceAccount to use to run the initial pipeline

.PP
\fB\-u\fP, \fB\-\-url\fP=""
    The git clone URL to clone into the current directory and then import

.PP
\fB\-\-use\-default\-git\fP[=false]
    use default git account

.PP
\fB\-\-verbose\fP[=false]
    Enables verbose output. The environment variable JX\_LOG\_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace

.PP
\fB\-\-wait\-for\-pr\fP[=true]
    waits for the Pull Request generated on the cluster environment git repository to merge


.SH EXAMPLE
.PP
# Import the current folder
  jx\-project import

.PP
# Import a different folder
  jx\-project import /foo/bar

.PP
# Import a Git repository from a URL
  jx\-project import \-\-url 
\[la]https://github.com/jenkins-x/spring-boot-web-example.git\[ra]

.PP
# Select a number of repositories from a GitHub organisation
  jx\-project import \-\-github \-\-org myname

.PP
# Import all repositories from a GitHub organisation selecting ones to not import
  jx\-project import \-\-github \-\-org myname \-\-all

.PP
# Import all repositories from a GitHub organisation which contain the text foo
  jx\-project import \-\-github \-\-org myname \-\-all \-\-filter foo


.SH SEE ALSO
.PP
\fBjx\-project(1)\fP


.SH HISTORY
.PP
Auto generated by spf13/cobra
